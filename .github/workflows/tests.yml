# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# https://dev.to/thejaredwilcurt/coverage-badge-with-github-actions-finally-59fa


# FIXME still has lots of placeholders: install, flake8

name: tests
run-name: ${{ github.actor }} running tests for ref ${{ github.ref_name }}

# FIXME
# on:
#   push:
#     branches: [ $default-branch ]
#   pull_request:
#     branches: [ $default-branch ]
on: [push]

jobs:

  setup:

    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.13"]  # FIXME find image with 3.6

    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies  # FIXME this is leftover generic, use pip installe - .[dev] instead?
        run: |
          python -m pip install --upgrade pip
          python -m pip install black flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up package
        run: |
          python -m pip install -e .

      - name: Check format with black
        run: |
          black --check src/just/ tests/

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 src/ tests/ setup.py --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 src/ tests/ setup.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          # run pytest with coverage
          pytest --cov-report term-missing --cov=src/just/ tests/

      # FIXME shouldn't be run for each version?
      - name: Capture coverage
        run: |
          # extract the coverage percentage from the coverage report output and
          # store it in the github environment variables
          report=`coverage report | tail -n 1 | grep ^TOTAL`
          tokens=( $report )
          coverage=${tokens[3]}
          coverage=`echo $coverage | cut -d '%' -f 1` # strip '%'
          echo "COVERAGE=$coverage"
          echo "COVERAGE=$coverage" >> $GITHUB_ENV

          # store the repo name in the github environment variables
          repo=$(echo ${{ github.repository }} | cut -d '/' -f 2)
          echo "REPO=$repo"
          echo "REPO=$repo" >> $GITHUB_ENV

          # store the ref name in the github environment variables
          ref=$(echo ${{ github.ref_name }})
          echo "REF=$ref"
          echo "REF=$ref" >> $GITHUB_ENV

      # FIXME shouldn't be run for each version?
      - name: Coverage Badge
        uses: Schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 37049f20166246459e2d38ee8ddf2afe
          filename: ${{ env.REPO }}_${{ env.REF }}.json
          label: test coverage
          message: ${{ env.COVERAGE }}%
          color: green
          namedLogo: Pytest  # simpleicons.org
          valColorRange: ${{ env.COVERAGE }}
          maxColorRange: 90
          minColorRange: 50
